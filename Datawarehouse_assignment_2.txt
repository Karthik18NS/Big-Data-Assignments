                                                 Data Warehousing Assignment

This problem set consists of two data modeling scenarios. You will be asked to analyze the strengths and weak-
nesses of some design alternatives for each scenario. Short answers are fine – one or two paragraphs per question
would be an appropriate length.



Scenario I :
-------------
In this scenario, we are interested in modeling student enrollment in Stanford courses. We would like to
answer questions such as:
• Which courses are most popular? Which instructors are most popular?
• Which courses are most popular among graduate students? Undergraduates? • Are there courses for which the
assigned classrooms is too large or too small?
We are planning to have a course enrollment fact table with the grain of one row per student per course enrollment.
In other words, if a student enrolls in 5 courses there will be 5 rows for that student in the fact table. We will use the
following dimensions: Course, Department, Student, Term, Classroom, and Instructor. There will be a single fact
measurement column, EnrollmentCount. Its value will always be equal to 1.
We are considering several options for dealing with the Instructor dimension. Interesting attributes of instructors
include FirstName, LastName, Title (e.g. Assistant Professor), Department, and TenuredFlag. The difficulty is that a
few courses (less than 5%) have multiple instructors. Thus it appears we cannot include the Instructor dimension in
the fact table because it doesn’t match the intended grain. Here are the options under consideration:
OptionA
Option B
Option C
ModifytheInstructordimensionbyaddingspecialrowsrepresentinginstructorteams.Forexample,CS276ais taught by
Manning and Raghavan, so there will be an Instructor row representing “Manning/Raghavan” (as well as separate
rows for Manning and Raghavan, assuming that they sometimes teach courses as sole instructors). In this way, the
Instructor dimension becomes true to the grain and we can include it in the fact table.
Change the grain of the fact table to be one row per student enrollment per course per instructor. For example, there
will be two fact rows for each student enrolled in CS 276a, one that points to Manning as an instructor and one that
points to Raghavan. However, each of the two rows will have a value of 0.5 in the EnrollmentCount field instead of
a value of 1, in order to allow the fact to aggregate properly. (Enrollments are “allocated” equally among the
multiple instructors.)
Create two fact tables. The first has the grain of one row per student enrollment per course and doesn’t include the
Instructor dimension. The second has the grain of one row per student enrollment per course per instructor and
includes the Instructor dimension (as well as all the other dimensions). Unlike Option B, the value of

EnrollmentCount will be 1 for all rows in the second fact. Tell warehouse users to use the second fact table for
queries involving attributes of the instructor dimension and the first fact table for all other queries.
Please answer the following questions.



Question 1. What are the strengths and weaknesses of each option?
ans:
Option A:
Strengths:
Instructor dimension is true to the grain.
It allows for analysis of popular instructor teams.
Weaknesses:
It may cause redundancy and increased storage requirements due to the creation of additional rows.
It may require additional data cleansing and standardization efforts to ensure consistent formatting of instructor team names.


Option B:
Strengths:
It allows for the Instructor dimension to be included in the fact table.
It maintains the granularity of the fact table and enables detailed analysis.
Weaknesses:
It may lead to increased complexity in queries that involve multiple instructors per course.
It may require changes to the data model and ETL processes to handle fractional enrollment counts.


Option C:
Strengths:
It provides two separate fact tables optimized for different types of queries.
It avoids fractional enrollment counts and maintains a consistent value of 1 in the EnrollmentCount column.
Weaknesses:
It may lead to increased complexity in queries that involve both the Instructor dimension and other dimensions.
It requires users to be aware of which fact table to use for each type of query.


Question 2. Which option would you choose and why?
ans:Option A, which modifies the Instructor dimension by adding special rows representing instructor teams. 
This option allows for the Instructor dimension to be included in the fact table while maintaining the intended grain. 
It also enables analysis of popular instructor teams, which could be valuable information for the university. 
Option A provides the best balance of functionality and simplicity for the given requirements.


Question 3. Would your answer to Question 2 be different if the majority of classes had multiple instructors?
How about if only one or two classes had multiple instructors? (Explain your answer.)
ans:Yes, my answer to Question 2 would be different if the majority of classes had multiple instructors. 
If most classes have multiple instructors, then Option B,
which changes the grain of the fact table to include one row per student enrollment per course per instructor,
might be a better choice. This option allows for a more detailed analysis of enrollments by instructor,
which could be valuable information for the university. However, if only one or two classes have multiple instructors, 
then Option A, which modifies the Instructor dimension by adding special rows representing instructor teams, 
may still be the better choice as it maintains the intended grain and simplifies the data model.


Scenario II:
------------

 In this scenario, we are building a data warehouse for an online brokerage company. The company
makes money by charging commissions when customers buy and sell stocks. We are planning to have a Trades fact
table with the grain of one row per stock trade. We will use the following dimensions: Date, Customer, Account,
Security (i.e. which stock was traded), and TradeType.
The company’s data analysts have told us that they have developed two customer scoring techniques that are used
extensively in their analyses.
· Each customer is placed into one of nine Customer Activity Segments based on their frequency of
transactions, average transaction size, and recency of transactions.
· EachcustomerisassignedaCustomerProfitabilityScorebasedontheprofitsearnedasaresultofthatcustomer’s
trades. The score can be either 1,2,3,4, or 5, with 5 being the most profitable.
These two scores are frequently used as filters or grouping attributes in queries. For example:
· How many trades were placed in July by customers in each customer activity segment?
· What was the total commission earned in each quarter of 2003 on trades of IBM stock by customers
with a profitability score of 4 or 5?
There are a total of 100,000 customers, and scores are recalculated every three months. The activity level or
profitability level of some customers changes over time, and users are very interested in understanding how
and why this occurs.
We are considering several options for dealing with the customer scores:
OptionA Option B Option C
Option D
ThescoresareattributesoftheCustomerdimension.Whenscoreschange,theoldscoreisoverwrittenwiththe new score
(Type 1 Slowly Changing Dimension).

The scores are attributes of the Customer dimension. When scores change, new Customer dimension rows are
created using the updated scores (Type 2 Slowly Changing Dimension).
The scores are stored in a separate CustomerScores dimension which contains 45 rows, one for each combi- nation
of activity and profitability scores. The Trades fact table includes a foreign key to the CustomerScores dimension.
The scores are stored in a CustomerScores outrigger table which contains 45 rows. The Customer dimension
includes a foreign key to the outrigger table (but the fact table does not). When scores change, the foreign key
column in the Customer table is updated to point to the correct outrigger row.
Please answer the following questions.



Question 5. What are the strengths and weaknesses of each option?
ans:
Option A:
Strengths:
Simple to implement and maintain as it involves updating the existing record in the Customer dimension.
Saves storage space as it only stores the current score.
Weaknesses:
Historical data cannot be preserved as the old score is overwritten.
Cannot track changes in customer behavior over time.

Option B:
Strengths:
Historical data is preserved as new rows are created in the Customer dimension with updated scores.
Able to track changes in customer behavior over time.
Weaknesses:
Increases storage space requirements as it involves creating new rows for each updated score.
More complex to implement and maintain than Option A.

Option C:
Strengths:
Scores are stored in a separate dimension, which allows for flexibility in reporting and analysis.
Efficient storage as it only includes 45 rows for each combination of scores.
Weaknesses:
May require additional joins in queries, which can impact performance.
Cannot track changes in customer behavior over time.

Option D:
Strengths:
Scores are stored in an outrigger table, which avoids the need for additional joins in queries.
Efficient storage as it only includes 45 rows for each combination of scores.
Able to track changes in customer behavior over time.
Weaknesses:
The fact table does not include a foreign key to the CustomerScores outrigger table, which may limit reporting flexibility.
More complex to implement and maintain than Option A.


Question 6. Which option would you choose and why?
ans:the best option depends on the specific needs of the business. 
If historical tracking is not important and storage and processing efficiency are top priorities, 
then Option A could be a good choice. If historical tracking is important and storage and processing resources are available, 
then Option B might be better. If simplifying queries is a priority, Option C or D could be a good choice, 
depending on whether the foreign key is stored in the dimension or the fact table.


Question 7. Would your answer to Question 6 be different if the number of customers and/or the time interval
between score recalculations was much larger or much smaller?
ans:
Yes, my answer to Question 6 could be different based on the number of customers and the time interval between score recalculations.
If the number of customers is much larger, Option C or D may be better because they reduce the number of rows in the Customer dimension table,
which can significantly improve query performance. However, if the time interval between score recalculations is much larger,
Option A or B may be better since the score changes happen less frequently, 
and the type 1 or type 2 slowly changing dimension approach can be easier to manage and maintain.

